软件设计七大原则
1 开闭原则  Open-Closed Principle, OCP  对扩展开放，对修改关闭。
2 依赖倒置原则 Dependence Inversion Principle,DIP 通过抽象使用各个类或者模块不相互影响，实现松耦合
3 单一职责原则 Simple Responsibility Pinciple，SRP 一个类，接口，方法只做一件事
4 接口隔离原则 Interface Segregation Principle, ISP 尽量保证接口的纯净性，客户端不应该依赖不需要的接口。
5 迪米特法则 Law of Demeter LoD 又叫最少知道原则，一个类对其所依赖的类知道的越少越好
6 里氏替换原则 Liskov Substitution Principle,LSP 子类可以扩展父类的功能但不能改变父类原有的功能
7 合成复用原则 Composite/Aggregate Reuse Principle,CARP 尽量使用对象组合，聚合，而不使用继承关系达到代码复用的目的。

学习设计原则，学习设计模式的基础。在实际开发过程中，并不是一定要求所有代码都
遵循设计原则，我们要考虑人力、时间、成本、质量，不是刻意追求完美，要在适当的
场景遵循设计原则，体现的是一种平衡取舍，帮助我们设计出更加优雅的代码结构。

1、深刻理解产品族和产品等级结构之间的关系
此例子我用的产品结构和产品族
产品族（汽车，电话），
产品结构 汽车-单车、轿车、suv   电话-老人机、智能电话
个人理解：产品有很多个，比如：车、家用电器、电脑  这个就是产品族
         产品等级结构理解就是：车又分suv，轿车，自行车  。家用电器 分为冰箱，微波炉，电风扇。
         比如现在有个工厂生产 车： suv，轿车，自行车  ；电器: 冰箱，微波炉，电风扇。
             所有的产品，就是产品族，车-suv-1.5l排量suv 这个就是这个产品的等级结构


简单工厂模式：他的最大优点就是在于工厂类包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，
对于客户端来说，去除了与具体产品的依赖，当算法比较稳定，一般不会对它进行新增，或删除等就适合用词模式；否则就会违背了“开放-封闭”原则
简单工厂的缺点：工厂类的职责相对过重，不易于扩展过于复杂的产品结构。

工厂方法模式：它定义了用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。
缺点：增加了系统的抽象性和理解难度

抽象方法模式：当产品有不同的系列，而不同的系列又有不同的创建方式，此时就适合用此模式。但是此模式比较复杂，而且如果增加产品会更麻烦，慎用

