单列的几种写法
1 饿汉式  就是在单例首次加载的时候就初始化单例对象 优点：没有加锁，执行效率高。 缺点：类加载的时候就初始化，不管用不用都占着空间。
2 懒汉式  在单例首次加载的时候不初始单例对象，在调用单例instance的时候初始化单例 优点：使用的时候才初始化单例，减少内存开支 缺点：存在线程安全
3 双层加锁懒汉式  懒汉式优化模式 优点：解决了线程安全问题， 缺点：因为锁的存在，有一点点效率的牺牲。
4 注册式单例 枚举式单例和容器式单例
5 静态内部类 这种形式兼顾饿汉式的内存浪费，也兼顾 synchronized 性能问题。内部类一定是要在方法调用之前初始化，巧妙地避免了线程安全问题。
6 ThreadLocal 单例， 保证线程内部的全局唯一，并且天生线程安全。


单例模式的优点
1 在内存中只有一个实例，减少内存开销
2 可以避免对资源的多重占用
3 设置全局访问点，严格控制访问
单例模式的缺点
1 没有接口，扩展困难
2 如果要扩展单例对象，只有修改代码，没有其他途径，不符合开闭原则。


单例模式的重点总结
1 私有化构造器
2 保证线程安全
3 延迟加载
4 防止序列化和 反序列化破坏单例
5 防御反射攻击单例

思考破坏单例模式的方式有哪些？并且归纳总结
 破坏单例的模式主要有两种
 1 反射攻击，也就是通过反射，重新初始化类 。 这种通过反射破坏的单例，在构造方法中抛出异常，拒绝此种方式重新实例化，也就是不让他通过反射调用。
 2.序列化破坏。 序列化破坏是类被序列化后保存到另外的地方，然后被重新读取加载，导致单例破坏。
 序列化破坏，在单例类中 加入private  Object readResolve(){ return  ourInstance; } 这样来保证单例


梳理内部类的执行逻辑，并画出时序图。
外部类初次加载，会初始化静态变量、静态代码块、静态方法，但不会加载内部类和静态内部类。
实例化外部类，调用外部类的静态方法、静态变量，则外部类必须先进行加载，但只加载一次。
直接调用静态内部类时，外部类不会加载。


